{"ast":null,"code":"var _jsxFileName = \"/home/jeremy/Job/Briqueterie/monRepo/Labriqueterie-test_technique/client/src/components/Tasks/tasks.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport { connect } from 'react-redux';\n\nclass TasksPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkArray = toCheck => {\n      console.log(toCheck);\n      toCheck.forEach(function (item, index) {\n        let hasIt = false;\n\n        for (let i = 0; i < this.props.tasks.length; i++) {\n          if (this.props.tasks[i].name === item.name) {\n            hasIt = true;\n            console.log('found an item we already had');\n          }\n        }\n\n        if (hasIt === false) {\n          this.props.tasks.push(item);\n          console.log('item added');\n        }\n      });\n    };\n\n    this.onClick = event => {\n      if (event.target.name === 'add') {\n        this.props.history.push('/createtask');\n      }\n\n      if (event.target.name === 'update') {}\n    };\n  }\n\n  componentDidMount() {\n    fetch(process.env.REACT_APP_API_URL + 'tasks/' + this.props.current._id, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      mode: 'cors'\n    }).then(res => {\n      //const propsCopy = this.props\n      console.log('we are here: ' + JSON.stringify(res));\n\n      if (res.ok) {\n        res.json().then(jsonParsed => {\n          console.log('lists received: ');\n          console.log(jsonParsed);\n          this.props.storeTasks(jsonParsed); //this.props.storeLists(jsonParsed)\n          //this.checkArray(jsonParsed)\n\n          this.forceUpdate();\n        });\n      } else {\n        console.log('error: ' + res);\n      }\n    }).then(error => {\n      console.log('error is: ');\n      console.error(error);\n    });\n  }\n\n  render() {\n    if (this.props.user.username === '') {\n      this.props.history.push('/signin');\n    }\n\n    console.log('==> ' + this.props.current.title);\n    console.log('and => ' + JSON.stringify(this.props.list));\n    return React.createElement(\"div\", {\n      className: \"todolist-array\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \" Tasks for \", this.props.current.title, \" \"), React.createElement(\"div\", {\n      className: \"list-type2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.props.tasks.map((item, index) => React.createElement(\"li\", {\n      key: item.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"other-list-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \" \", item.name, \" \"), React.createElement(DatePicker, {\n      selected: new Date(item.startDate),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" Started date \"), React.createElement(DatePicker, {\n      selected: new Date(item.endDate),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \" Delivery date \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \" Click to mark it done   \", React.createElement(\"input\", {\n      type: \"checkbox\",\n      onClick: this.onCLock,\n      name: \"update\",\n      id: \"box-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), \" \"))))), React.createElement(\"button\", {\n      onClick: this.onClick,\n      name: \"add\",\n      className: \"list-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \" Add a Task \"), React.createElement(\"button\", {\n      onClick: this.onClick,\n      name: \"add\",\n      className: \"list-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \" Save changes \"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    list: state.todolists,\n    current: state.currentList,\n    tasks: state.tasks,\n    toUpdate: []\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    storeTasks: tasks => dispatch({\n      type: 'STORE_TASKS',\n      value: tasks\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksPage);","map":{"version":3,"sources":["/home/jeremy/Job/Briqueterie/monRepo/Labriqueterie-test_technique/client/src/components/Tasks/tasks.js"],"names":["React","Component","DatePicker","connect","TasksPage","checkArray","toCheck","console","log","forEach","item","index","hasIt","i","props","tasks","length","name","push","onClick","event","target","history","componentDidMount","fetch","process","env","REACT_APP_API_URL","current","_id","method","headers","mode","then","res","JSON","stringify","ok","json","jsonParsed","storeTasks","forceUpdate","error","render","user","username","title","list","map","Date","startDate","endDate","onCLock","mapStateToProps","state","todolists","currentList","toUpdate","mapDispatchToProps","dispatch","type","value"],"mappings":";AAAA,OAAQA,KAAR,IAAiBC,SAAjB,QAAkC,OAAlC;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAChCI,UADgC,GAClBC,OAAD,IAAa;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAA,MAAAA,OAAO,CAACG,OAAR,CAAgB,UAASC,IAAT,EAAeC,KAAf,EAAsB;AACpC,YAAIC,KAAK,GAAG,KAAZ;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAArC,EAA6CH,CAAC,EAA9C,EAAkD;AAChD,cAAI,KAAKC,KAAL,CAAWC,KAAX,CAAiBF,CAAjB,EAAoBI,IAApB,KAA6BP,IAAI,CAACO,IAAtC,EAA4C;AAC1CL,YAAAA,KAAK,GAAG,IAAR;AACAL,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;AACF;;AACD,YAAII,KAAK,KAAK,KAAd,EAAqB;AACnB,eAAKE,KAAL,CAAWC,KAAX,CAAiBG,IAAjB,CAAsBR,IAAtB;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD;AACF,OAZD;AAaH,KAhBiC;;AAAA,SAiDhCW,OAjDgC,GAiDrBC,KAAD,IAAW;AACnB,UAAIA,KAAK,CAACC,MAAN,CAAaJ,IAAb,KAAsB,KAA1B,EAAiC;AAC/B,aAAKH,KAAL,CAAWQ,OAAX,CAAmBJ,IAAnB,CAAwB,aAAxB;AACD;;AACD,UAAIE,KAAK,CAACC,MAAN,CAAaJ,IAAb,KAAsB,QAA1B,EAAoC,CAEnC;AAEF,KAzD+B;AAAA;;AAkBhCM,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,QAAhC,GAA2C,KAAKb,KAAL,CAAWc,OAAX,CAAmBC,GAA/D,EAAoE;AACvEC,MAAAA,MAAM,EAAE,KAD+D;AAEvEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF8D;AAKvEC,MAAAA,IAAI,EAAE;AALiE,KAApE,CAAL,CAOCC,IAPD,CAOMC,GAAG,IAAI;AACX;AACA3B,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB2B,IAAI,CAACC,SAAL,CAAeF,GAAf,CAA9B;;AACA,UAAIA,GAAG,CAACG,EAAR,EAAY;AACVH,QAAAA,GAAG,CAACI,IAAJ,GACCL,IADD,CACMM,UAAU,IAAI;AAClBhC,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY+B,UAAZ;AACA,eAAKzB,KAAL,CAAW0B,UAAX,CAAsBD,UAAtB,EAHkB,CAIlB;AACA;;AACA,eAAKE,WAAL;AACD,SARD;AASD,OAVD,MAUO;AACLlC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAY0B,GAAxB;AACD;AACF,KAvBD,EAwBCD,IAxBD,CAwBMS,KAAK,IAAI;AACbnC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACmC,KAAR,CAAcA,KAAd;AACD,KA3BD;AA4BD;;AAWDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAK7B,KAAL,CAAW8B,IAAX,CAAgBC,QAAhB,KAA6B,EAAjC,EAAqC;AACnC,WAAK/B,KAAL,CAAWQ,OAAX,CAAmBJ,IAAnB,CAAwB,SAAxB;AACD;;AACDX,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAS,KAAKM,KAAL,CAAWc,OAAX,CAAmBkB,KAAxC;AACAvC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY2B,IAAI,CAACC,SAAL,CAAe,KAAKtB,KAAL,CAAWiC,IAA1B,CAAxB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgB,KAAKjC,KAAL,CAAWc,OAAX,CAAmBkB,KAAnC,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKhC,KAAL,CAAWC,KAAX,CAAiBiC,GAAjB,CAAqB,CAACtC,IAAD,EAAOC,KAAP,KACpB;AAAI,MAAA,GAAG,EAAED,IAAI,CAACO,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAwCP,IAAI,CAACO,IAA7C,MADF,EAEE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,IAAIgC,IAAJ,CAASvC,IAAI,CAACwC,SAAd,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAEmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFnD,EAGE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,IAAID,IAAJ,CAASvC,IAAI,CAACyC,OAAd,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAGiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHjD,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA4B;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,OAAO,EAAE,KAAKC,OAArC;AAA8C,MAAA,IAAI,EAAC,QAAnD;AAA4D,MAAA,EAAE,EAAC,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B,MAJF,CADD,CADH,CADF,CAFF,EAcE;AAAQ,MAAA,OAAO,EAAE,KAAKjC,OAAtB;AAA+B,MAAA,IAAI,EAAC,KAApC;AAA0C,MAAA,SAAS,EAAC,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAdF,EAeE;AAAQ,MAAA,OAAO,EAAE,KAAKA,OAAtB;AAA+B,MAAA,IAAI,EAAC,KAApC;AAA0C,MAAA,SAAS,EAAC,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAfF,CADF;AAmBD;;AAnF+B;;AAsFlC,MAAMkC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLV,IAAAA,IAAI,EAAEU,KAAK,CAACV,IADP;AAELG,IAAAA,IAAI,EAAEO,KAAK,CAACC,SAFP;AAGL3B,IAAAA,OAAO,EAAE0B,KAAK,CAACE,WAHV;AAILzC,IAAAA,KAAK,EAAEuC,KAAK,CAACvC,KAJR;AAKL0C,IAAAA,QAAQ,EAAE;AALL,GAAP;AAOD,CARD;;AAUA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLnB,IAAAA,UAAU,EAAGzB,KAAD,IAAW4C,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,aAAN;AAAqBC,MAAAA,KAAK,EAAC9C;AAA3B,KAAD;AAD1B,GAAP;AAGD,CAJD;;AAMA,eAAeZ,OAAO,CAACkD,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CtD,SAA7C,CAAf","sourcesContent":["import  React, { Component } from 'react'\n\nimport DatePicker from 'react-datepicker'\n\nimport { connect } from 'react-redux'\n\nclass TasksPage extends Component {\n  checkArray = (toCheck) => {\n    console.log(toCheck)\n    toCheck.forEach(function(item, index) {\n      let hasIt = false\n      for (let i = 0; i < this.props.tasks.length; i++) {\n        if (this.props.tasks[i].name === item.name) {\n          hasIt = true\n          console.log('found an item we already had')\n        }\n      }\n      if (hasIt === false) {\n        this.props.tasks.push(item)\n        console.log('item added')\n      }\n    })\n}\n\n  componentDidMount() {\n    fetch(process.env.REACT_APP_API_URL + 'tasks/' + this.props.current._id, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      mode: 'cors',\n    })\n    .then(res => {\n      //const propsCopy = this.props\n      console.log('we are here: ' + JSON.stringify(res))\n      if (res.ok) {\n        res.json()\n        .then(jsonParsed => {\n          console.log('lists received: ')\n          console.log(jsonParsed)\n          this.props.storeTasks(jsonParsed)\n          //this.props.storeLists(jsonParsed)\n          //this.checkArray(jsonParsed)\n          this.forceUpdate()\n        })\n      } else {\n        console.log('error: ' + res)\n      }\n    })\n    .then(error => {\n      console.log('error is: ')\n      console.error(error)\n    })\n  }\n\n  onClick = (event) => {\n    if (event.target.name === 'add') {\n      this.props.history.push('/createtask')\n    }\n    if (event.target.name === 'update') {\n\n    }\n\n  }\n  render() {\n    if (this.props.user.username === '') {\n      this.props.history.push('/signin')\n    }\n    console.log('==> ' + this.props.current.title)\n    console.log('and => ' + JSON.stringify(this.props.list))\n    return (\n      <div className=\"todolist-array\">\n        <h3> Tasks for {this.props.current.title} </h3>\n        <div className=\"list-type2\">\n          <ol>\n            {this.props.tasks.map((item, index) => (\n              <li key={item.name}>\n                <button className=\"other-list-button\"> {item.name} </button>\n                <DatePicker selected={new Date(item.startDate)}/><p> Started date </p>\n                <DatePicker selected={new Date(item.endDate)}/><p> Delivery date </p>\n                <p> Click to mark it done   <input type=\"checkbox\" onClick={this.onCLock} name=\"update\" id=\"box-1\"/> </p>\n              </li>\n            ))}\n          </ol>\n        </div>\n        <button onClick={this.onClick} name=\"add\" className=\"list-button\"> Add a Task </button>\n        <button onClick={this.onClick} name=\"add\" className=\"list-button\"> Save changes </button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    list: state.todolists,\n    current: state.currentList,\n    tasks: state.tasks,\n    toUpdate: []\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeTasks: (tasks) => dispatch({type:'STORE_TASKS', value:tasks})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksPage)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/jeremy/Job/Briqueterie/monRepo/Labriqueterie-test_technique/client/src/components/CreateTask/createTask.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport { connect } from 'react-redux';\n\nclass CreateTaskPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChange = event => {\n      this.props.taskParam.name = event.target.value;\n    };\n\n    this.onChangeDatePickerStart = date => {\n      this.props.taskParam.startDate = date;\n      console.log('received date: ' + date); //this.setState({taskParam.startDate: date})\n\n      this.forceUpdate();\n    };\n\n    this.onChangeDatePickerEnd = date => {\n      this.props.taskParam.endDate = date;\n      console.log('received date: ' + date); //this.setState({taskParam.startDate: date})\n\n      this.forceUpdate();\n    };\n\n    this.onSubmit = event => {\n      const jsonBody = {\n        'listId': this.props.current._id,\n        taskParams: {\n          'name': this.props.taskParam.name,\n          'startDate': this.props.taskParam.startDate,\n          'endDate': this.props.taskParam.endDate\n        }\n      };\n      console.log('handleClick: jsonBody: ' + JSON.stringify(jsonBody));\n      fetch(process.env.REACT_APP_API_URL + 'tasks/create', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        mode: 'cors',\n        body: JSON.stringify(jsonBody)\n      }).then(res => {\n        console.log('we are here');\n\n        if (res.ok) {\n          res.json().then(jsonParsed => {\n            console.log(jsonParsed);\n            this.props.history.push('/tasks');\n          });\n        } else {\n          console.log('res not OK: ' + JSON.stringify(res));\n        }\n      }).then(error => {\n        console.error(error);\n      });\n    };\n  }\n\n  render() {\n    if (this.props.user.username === '') this.props.history.push('/signin');\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \" Create a Task \"), React.createElement(\"div\", {\n      className: \"form-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.onChange,\n      className: \"form-control\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: this.props.taskParam.name,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \" Choose a starting date (optionnal) \"), React.createElement(DatePicker, {\n      onChange: this.onChangeDatePickerStart,\n      selected: this.props.taskParam.startDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \" Choose an ending date (required) \"), React.createElement(DatePicker, {\n      onChange: this.onChangeDatePickerEnd,\n      selected: this.props.taskParam.endDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"submit\",\n      onClick: this.onSubmit,\n      name: \"submit\",\n      className: \"ibtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \" Create \"), React.createElement(\"button\", {\n      id: \"cancel\",\n      className: \"ibtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" Cancel \"))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    current: state.currentList,\n    taskParam: {\n      name: 'name',\n      startDate: new Date(),\n      endDate: new Date().setDate(new Date().getDate() + 1)\n    }\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTaskPage);","map":{"version":3,"sources":["/home/jeremy/Job/Briqueterie/monRepo/Labriqueterie-test_technique/client/src/components/CreateTask/createTask.js"],"names":["React","Component","DatePicker","connect","CreateTaskPage","onChange","event","props","taskParam","name","target","value","onChangeDatePickerStart","date","startDate","console","log","forceUpdate","onChangeDatePickerEnd","endDate","onSubmit","jsonBody","current","_id","taskParams","JSON","stringify","fetch","process","env","REACT_APP_API_URL","method","headers","mode","body","then","res","ok","json","jsonParsed","history","push","error","render","user","username","mapStateToProps","state","currentList","Date","setDate","getDate","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport DatePicker from 'react-datepicker'\nimport { connect } from 'react-redux'\n\nclass CreateTaskPage extends Component {\n  onChange = (event) => {\n    this.props.taskParam.name = event.target.value\n  }\n\n  onChangeDatePickerStart = (date) => {\n    (this.props.taskParam.startDate) = (date)\n    console.log('received date: ' + date)\n    //this.setState({taskParam.startDate: date})\n    this.forceUpdate()\n  }\n\n  onChangeDatePickerEnd = (date) => {\n    (this.props.taskParam.endDate) = (date)\n    console.log('received date: ' + date)\n    //this.setState({taskParam.startDate: date})\n    this.forceUpdate()\n  }\n\n  onSubmit = (event) => {\n    const jsonBody = {\n      'listId': this.props.current._id,\n      taskParams: {\n        'name': this.props.taskParam.name,\n        'startDate': this.props.taskParam.startDate,\n        'endDate': this.props.taskParam.endDate\n      }\n    }\n    console.log('handleClick: jsonBody: ' + JSON.stringify(jsonBody))\n      fetch(process.env.REACT_APP_API_URL + 'tasks/create', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      mode: 'cors',\n      body: JSON.stringify(jsonBody)\n    })\n    .then(res => {\n      console.log('we are here')\n      if (res.ok) {\n        res.json()\n        .then(jsonParsed => {\n          console.log(jsonParsed)\n          this.props.history.push('/tasks')\n        })\n      } else {\n        console.log('res not OK: ' + JSON.stringify(res))\n      }\n    })\n    .then(error => {\n      console.error(error)\n    })\n  }\n  render() {\n    if (this.props.user.username === '')\n      this.props.history.push('/signin')\n    return (\n      <div className=\"row\">\n      <div className=\"form-holder\">\n        <h3> Create a Task </h3>\n        <div className=\"form-content\">\n          <div className=\"form-items\">\n            <input onChange={this.onChange} className=\"form-control\" type=\"text\" name=\"name\" placeholder={this.props.taskParam.name} required/>\n            <h3> Choose a starting date (optionnal) </h3>\n            <DatePicker onChange={this.onChangeDatePickerStart}selected={this.props.taskParam.startDate}/>\n            <h3> Choose an ending date (required) </h3>\n            <DatePicker onChange={this.onChangeDatePickerEnd}selected={this.props.taskParam.endDate}/>\n            <div className=\"form-button\">\n              <button id=\"submit\" onClick={this.onSubmit} name=\"submit\" className=\"ibtn\"> Create </button>\n              <button id=\"cancel\" className=\"ibtn\"> Cancel </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    current: state.currentList,\n    taskParam: {\n      name: 'name',\n      startDate: new Date(),\n      endDate: new Date().setDate(new Date().getDate() + 1)\n    }\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTaskPage)\n"]},"metadata":{},"sourceType":"module"}